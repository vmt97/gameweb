{"version":3,"sources":["../../../../assets/scripts/assets/scripts/Square.js"],"names":["GameController","require","cc","Class","extends","Component","properties","index","type","labelIndex","default","Label","labelType","defaultSprite","SpriteFrame","t","onLoad","node","on","initInfor","Node","EventType","TOUCH_START","tounchSquare","Sprite","spriteOpen","string","instance","isCanPlay","log","tempSquare","getTmpSquare","openSquare","setTmpSquare","tempType","getType","sequence","callFunc","delayTime","matchSquare","countScore","checkWinGame","setCanPlay","resetSquare","clearTmpSquare","runAction","scaleIn","scaleTo","scaleOut","getComponent","spriteFrame","zIndex","removeFromParent","removeSquare","getIndex"],"mappings":"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","file":"Square.js","sourceRoot":"../../../../assets/scripts","sourcesContent":["// Learn cc.Class:\n//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/class.html\n//  - [English] http://docs.cocos2d-x.org/creator/manual/en/scripting/class.html\n// Learn Attribute:\n//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\n//  - [English] http://docs.cocos2d-x.org/creator/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\n//  - [English] https://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html\nvar GameController = require(\"GameController\");\n\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n        index: 0,\n        type: 0,\n\n        labelIndex: {\n            default : null,\n            type: cc.Label\n        },\n        labelType: {\n            default : null,\n            type: cc.Label\n        },\n        defaultSprite: {\n            default: null,\n            type: cc.SpriteFrame\n        },\n        t: {\n            default: null,\n            type: cc.SpriteFrame\n        }\n    },\n\n    // LIFE-CYCLE CALLBACKS:\n\n    onLoad () {\n        this.node.on(\"INIT_INFO\", this.initInfor, this);\n        this.node.on(cc.Node.EventType.TOUCH_START,this.tounchSquare,this);\n    },\n\n\n    initInfor(index, type, Sprite){\n        this.index = index;\n        this.type = type;\n        this.spriteOpen = Sprite;\n\n        this.labelIndex.string = index;\n        this.labelType.string = type;\n\n    },\n\n    tounchSquare(){\n        if(!GameController.instance.isCanPlay())\n            return;\n        cc.log(\"can play: \" + GameController.instance.isCanPlay());\n\n        let tempSquare = GameController.instance.getTmpSquare();\n        if(!tempSquare){\n            this.openSquare();\n            GameController.instance.setTmpSquare(this);\n        }\n        else{\n            let tempType = tempSquare.getType();\n\n            if(tempSquare != this){\n                let sequence = cc.sequence(\n                    cc.callFunc(()=>{\n                        this.openSquare();\n                    }),\n                    cc.delayTime(1),\n                    cc.callFunc(()=>{\n                        if(tempType === this.getType()){\n                            this.matchSquare();\n                            tempSquare.matchSquare();\n                            GameController.instance.countScore();\n                            GameController.instance.checkWinGame();\n                            GameController.instance.setCanPlay(false);\n                        }\n                        else{\n                            this.resetSquare();\n                            tempSquare.resetSquare();\n                            GameController.instance.clearTmpSquare();\n                        }\n                    })\n                )\n                this.node.runAction(sequence);\n            }\n        }\n    },\n\n\n    openSquare(){\n        let scaleIn = cc.scaleTo(0.3,0,1);\n        let scaleOut = cc.scaleTo(0.3,1,1);\n        let sequence = cc.sequence(\n                scaleIn,\n                cc.callFunc(()=>{\n                    this.node.getComponent(cc.Sprite).spriteFrame = this.spriteOpen;                    \n                }),\n                scaleOut);\n        this.node.runAction(sequence);\n    },\n\n    resetSquare(){\n        GameController.instance.setCanPlay(true);\n        let scaleIn = cc.scaleTo(0.3,0,1);\n        let scaleOut = cc.scaleTo(0.3,1,1);\n        let sequence = cc.sequence(\n                scaleIn,\n                cc.callFunc(()=>{\n                    this.node.getComponent(cc.Sprite).spriteFrame = this.defaultSprite;                    \n                }),\n                scaleOut);\n        this.node.runAction(sequence);\n    },\n\n    matchSquare(){\n        this.node.zIndex = 1;\n        let scaleIn = cc.scaleTo(0.3,2,2);\n        let sequence = cc.sequence(\n                        scaleIn,\n                        cc.callFunc(()=>{\n                            this.node.removeFromParent(true);\n                            GameController.instance.clearTmpSquare();\n                            GameController.instance.checkWinGame();\n                            GameController.instance.setCanPlay(true);\n                        })\n        );\n\n        this.node.runAction(sequence);\n        GameController.instance.removeSquare(this);\n    },\n\n    getType(){\n        return this.type;\n    },\n\n    getIndex(){\n        return this.index;\n    }\n});\n"]}