{"version":3,"sources":["GameController.js"],"names":["GameController","cc","Class","extends","Component","properties","listImage","default","type","SpriteFrame","square","Prefab","listSquare","tmpSquare","UIController","require","score","canPlay","statics","instance","onLoad","initLevel","hidePlayButton","index","length","typeCreate","action1","delayTime","action2","callFunc","createSquare","action3","node","runAction","sequence","repeat","setUpPositionSquares","maxRow","maxCol","duration","row","col","x","y","moveAction","moveTo","easing","easeBackInOut","spriteFrame","instantiate","parent","emit","setPosition","fadeIn","push","radomInteger","min","max","Math","ceil","floor","random","randomElementInArray","arr","getTmpSquare","setTmpSquare","clearTmpSquare","removeSquare","indexOf","splice","setCanPlay","pushToTempSquares","pushToTempList","checkMatchSquare","typeSquare1","getType","typeSquare2","resetSquare","matchSquare","countScore","checkWinGame","showVictory","setScore","showScore","playAgain","hideUIplayAgain","isCanPlay"],"mappings":"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","file":"GameController.js","sourceRoot":"../../../../assets/scripts","sourcesContent":["var GameController = cc.Class({\n    extends: cc.Component,\n\n    properties: {\n        listImage: {\n            default: [],\n            type: cc.SpriteFrame\n        },\n\n        square: {\n            default: null,\n            type: cc.Prefab\n        },\n\n        listSquare: {\n            default: [],\n            type: cc.Prefab\n        },\n\n        tmpSquare: {\n            default: [],\n            type: cc.Prefab\n        },\n        UIController: require(\"UIConTroller\"),\n        score: 0,\n        canPlay: true\n    },\n\n    statics: {\n        instance: null\n    },\n\n    onLoad() {\n        GameController.instance = this;\n        this.score = 0;\n    },\n\n\n    initLevel: function () {\n        this.UIController.hidePlayButton();\n        let index = (this.listImage.length * 2) + 1;\n        let typeCreate = 0;\n        let action1 = cc.delayTime(0.1);\n        let action2 = cc.callFunc(() => {\n            index--;\n            this.createSquare(index, typeCreate, this.listImage[typeCreate]);\n        }, this);\n        let action3 = cc.callFunc(() => {\n            index--;\n            this.createSquare(index, typeCreate, this.listImage[typeCreate]);\n            typeCreate++;\n        }, this);\n\n        this.node.runAction(cc.sequence(\n            cc.repeat(cc.sequence(action1, action2, action3), this.listImage.length),\n            cc.delayTime(1),\n            cc.callFunc(() => {\n                this.setUpPositionSquares();\n                })\n            )\n        );\n    },\n\n    setUpPositionSquares() {\n        let maxRow = 4;\n        let maxCol = 5;\n        let index = this.listSquare.length - 1;\n        let duration = 0;\n\n        // this.listSquare = this.listSquare.sort(() => Math.random() - 0.5);\n        for (let row = 0; row < maxRow; row++) {\n            for (let col = 0; col < maxCol; col++) {\n                let x = - 130 + (col * 64);\n                let y = 150 + (-row * 64);\n                let square = this.listSquare[index];\n                let moveAction = cc.moveTo(1, x, y).easing(cc.easeBackInOut());\n                let sequence = cc.sequence(\n                    cc.delayTime(0.1 * duration),\n                    moveAction,\n                );\n                square.runAction(sequence);\n                index--;\n                duration++;\n            }\n        }\n               \n    },\n\n    createSquare(index, type, spriteFrame) {\n        let square = cc.instantiate(this.square);\n        square.parent = this.node;\n        // index++;\n        square.emit(\"INIT_INFO\", index, type, spriteFrame);\n        square.setPosition(0, -130, 0);\n        let fadeIn = cc.fadeIn(0.1);\n        square.runAction(fadeIn);\n        this.listSquare.push(square);\n    },\n\n    radomInteger: function (min, max) {\n        min = Math.ceil(min);\n        max = Math.floor(max);\n        return Math.floor(Math.random() * (max - min) + min);\n    },\n\n    //4\n    randomElementInArray: function (arr) {\n        let index = radomInteger(0, arr.length - 1);\n        return arr[index];\n    },\n\n\n    getTmpSquare() {\n        return this.tmpSquare;\n    },\n\n    setTmpSquare(square) {\n        this.tmpSquare = square;\n    },\n\n    clearTmpSquare() {\n        this.tmpSquare = [];\n    },\n\n    removeSquare(square) {\n        let index = this.listSquare.indexOf(square);\n        this.listSquare.splice(index, 1);\n        this.setCanPlay(true);\n    },\n\n    pushToTempSquares(square) {\n\n        if (this.tmpSquare.length === 0) {\n            this.pushToTempList(square);\n            return;\n        }\n        else if(this.tmpSquare.length === 1){\n            if(this.tmpSquare[0] != square){\n                this.pushToTempList(square);\n                this.checkMatchSquare();\n            }\n        }\n    },\n\n    checkMatchSquare(){\n        if(this.tmpSquare.length < 2) return;\n\n        let typeSquare1 = this.tmpSquare[0].getType();\n        let typeSquare2 = this.tmpSquare[1].getType();\n\n        let sequence = cc.sequence(\n            cc.delayTime(1),\n            cc.callFunc(()=>{\n                if(typeSquare1 != typeSquare2){\n                    this.tmpSquare[0].resetSquare();\n                    this.tmpSquare[1].resetSquare();\n                }\n                else{\n                    this.tmpSquare[0].matchSquare();\n                    this.tmpSquare[1].matchSquare();\n                    this.countScore();\n                    this.checkWinGame();\n                }\n            }),\n            cc.delayTime(0.5),\n            cc.callFunc(()=>{\n                this.clearTmpSquare();\n            })\n\n        );\n        this.node.runAction(sequence);\n    },\n\n    pushToTempList(square) {\n        this.tmpSquare.push(square);\n    },\n\n    checkWinGame() {\n        if (this.listSquare.length > 0)\n            return;\n        this.UIController.showVictory();\n    },\n\n    countScore() {\n        let action1 = cc.delayTime(0.1);\n        let action2 = cc.callFunc(() => {\n            this.score += 1;\n            this.setScore();\n        }, this);\n        this.node.runAction(cc.repeat(cc.sequence(action1, action2), 10));\n    },\n\n    setScore() {\n        this.UIController.showScore(this.score);\n    },\n\n    playAgain() {\n        this.UIController.hideUIplayAgain();\n        this.initLevel();\n    },\n\n    setCanPlay(canPlay) {\n        this.canPlay = canPlay;\n    },\n\n    isCanPlay() {\n        return this.canPlay;\n    }\n\n});\n"]}